microservices:
  - name: mydb
    image: postgres:16
    port: 5432
    replicas: 1
    minReadySeconds: 3
    type: ClusterIP
    labels: database
    env:
      password:
        name: POSTGRES_PASSWORD
        secretKeyRef:
          name: my-db
          key: password
      db:
        name: POSTGRES_DB
        secretKeyRef:
          name: my-db
          key: db
    volumes:
      name: postgres-storage
    volumemounts:
      mountPath: /var/lib/postgresql/data
    # Resource limits for database
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    # HPA for database (usually not recommended, but included for reference)
    hpa:
      enabled: false  # Databases typically shouldn't auto-scale
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80

  - name: studentapp
    image: "chaitanyamanikumar/mydb:v2"
    minReadySeconds: 60
    port: 5000
    replicas: 2
    type: NodePort
    labels: pythonapp
    initContainers:
      - name: wait-for-db
        image: postgres:16-alpine
        command:
          - sh
          - -c
          - |
            echo "=========================================="
            echo "Step 1: Checking if PostgreSQL server is reachable..."
            echo "=========================================="
            
            until pg_isready -h mydb -p 5432 -U postgres; do
              echo "‚è≥ PostgreSQL server is not ready yet - waiting 3 seconds..."
              sleep 3
            done
            
            echo "‚úÖ PostgreSQL server is UP and accepting connections!"
            echo ""
            echo "=========================================="
            echo "Step 2: Verifying 'student' database exists..."
            echo "=========================================="
            
            export PGPASSWORD=$POSTGRES_PASSWORD
            
            until psql -h mydb -U postgres -d student -c 'SELECT 1' >/dev/null 2>&1; do
              echo "‚è≥ Database 'student' is not ready yet - waiting 3 seconds..."
              sleep 3
            done
            
            echo "‚úÖ Database 'student' exists and is accessible!"
            echo ""
            echo "=========================================="
            echo "Step 3: Database connection test successful!"
            echo "=========================================="
            echo "üöÄ Ready to start the Python application..."
        env:
          password:
            name: POSTGRES_PASSWORD
            secretKeyRef:
              name: my-db
              key: password
    env:
      password:
        name: POSTGRES_PASSWORD
        secretKeyRef:
          name: my-db
          key: password
      db:
        name: POSTGRES_DB
        secretKeyRef:
          name: my-db
          key: db
      db_host:
        name: POSTGRES_HOST
        value: mydb
      db_user:
        name: POSTGRES_USER
        value: postgres
    # Resource limits for application (REQUIRED for HPA)
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"
    # HPA configuration for application
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
      # Optional: Advanced scaling behavior
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
          policies:
          - type: Percent
            value: 50  # Scale down max 50% of current pods
            periodSeconds: 60
          - type: Pods
            value: 2  # Or scale down max 2 pods
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 0  # Scale up immediately
          policies:
          - type: Percent
            value: 100  # Scale up max 100% (double) of current pods
            periodSeconds: 30
          - type: Pods
            value: 4  # Or scale up max 4 pods at once
            periodSeconds: 30
